import tensorly as tl
tl.set_backend('pytorch')
from tensorly import norm
from tensorly.testing import assert_array_almost_equal
from torch import transpose, complex64
from pytest import raises

from ..density_tensor import DensityTensor


err_tol = 4


def test_validate_subsystems():
    square_subsystems = [[3, 2, 5], [3, 2, 5]]
    column_subsystems = [[1, 7, 4], [1, 1, 1]]
    row_subsystems = [[1, 1, 1], [2, 2, 5]]
    dummy_tensor = tl.randn((4, 4))

    DT = DensityTensor(dummy_tensor, square_subsystems)
    assert DT._validate_subsystems(square_subsystems) == (square_subsystems, 'rho')
    assert DT._validate_subsystems(column_subsystems) == (column_subsystems, 'ket')
    assert DT._validate_subsystems(row_subsystems) == (row_subsystems, 'bra')
    with raises(Exception):
        DT[3]
    with raises(Exception):
        DT[2] = 'ket'
    with raises(Exception):
        DT[3] = 0

def test_partial_trace_state():
    # For GHZ state
    ket = tl.zeros((8, 1), dtype=complex64)
    ket[0] = ket[-1] = 1j/tl.sqrt(tl.tensor(2))
    ket = DensityTensor(ket, [[2, 2, 2], [1, 1, 1]])
    ptrace = tl.zeros((4, 4))
    ptrace[0, 0] = ptrace[-1, -1] = 0.5
    ptrace = tl.reshape(ptrace, (2,2,2,2))
    assert_array_almost_equal(ket.partial_trace([0,1])[0], ptrace, decimal=err_tol)
    assert ket.partial_trace([0,1])[1] == [[2, 2], [2, 2]]
    assert_array_almost_equal(ket.partial_trace([0,2])[0], ptrace, decimal=err_tol)
    assert ket.partial_trace([0,2])[1] == [[2, 2], [2, 2]]
    assert_array_almost_equal(ket.partial_trace([1,2])[0], ptrace, decimal=err_tol)
    assert ket.partial_trace([0,1])[1] == [[2, 2], [2, 2]]
    assert ket[2] == 'ket'

    # For product state
    dtype=complex64
    ket0 = tl.zeros((8, 1), dtype=dtype)
    ket0[0] = 1j
    ket[0] = ket0
    ket[1] = [[2, 2, 2], [1, 1, 1]]
    ptrace = tl.zeros((4, 4))
    ptrace[0, 0] = 1
    ptrace = tl.reshape(ptrace, (2,2,2,2))
    assert_array_almost_equal(ket.partial_trace([0,1])[0], ptrace, decimal=err_tol)
    assert_array_almost_equal(ket.partial_trace([0,2])[0], ptrace, decimal=err_tol)
    assert_array_almost_equal(ket.partial_trace([1,2])[0], ptrace, decimal=err_tol)

    # For bra state
    ket[0] = tl.transpose(ket0)
    ket[1] = [[1, 1, 1], [2, 2, 2]]
    assert_array_almost_equal(ket.partial_trace([0,1])[0], ptrace, decimal=err_tol)

    # For random state
    ket = tl.tensor([-0.27174333+0.06225249j, 0.20616179-0.18071416j, 0.18550747+0.05495092j, -0.00626808+0.12078754j, 0.27767312+0.10238018j, -0.42849597-0.13862099j, -0.10520822-0.31314208j, 0.00699108-0.02028037j, -0.2418671 +0.13454599j, 0.17060893-0.17894387j, 0.0514863 -0.05192023j, -0.01104012-0.03265533j, -0.0499423 +0.01854696j, -0.04506411-0.28072336j, 0.28345189+0.06809349j, -0.28448756+0.03475503j], dtype=dtype)
    ket = ket.reshape(16, 1)
    ket = DensityTensor(ket, [[2, 2, 4], [1, 1, 1]])
    true_ptrace_01 = tl.tensor([[[[ 0.20494164-8.38366588e-19j, -0.17158891+2.04146838e-01j], [0.1444352 +3.84877000e-02j, 0.11847168+3.67485186e-02j]], [[-0.17158891-2.04146838e-01j, 0.39999554-2.99382046e-18j], [-0.0902583 -1.83581672e-01j, -0.00758298-2.00375273e-01j]]], [[[0.1444352 -3.84877000e-02j, -0.0902583 +1.83581672e-01j], [0.14426543+3.10199076e-20j, 0.0701845 +4.51751842e-02j]], [[0.11847168-3.67485186e-02j, -0.00758298+2.00375273e-01j], [0.0701845 -4.51751842e-02j, 0.25079738+1.22903273e-18j]]]], dtype=dtype)
    assert_array_almost_equal(ket.partial_trace([0,1])[0], true_ptrace_01.reshape((2,2,2,2)), decimal=err_tol)
    assert ket.partial_trace([0,1])[1] == [[2, 2], [2, 2]]
    true_ptrace_02 = tl.tensor([[[[0.16530387+0.j, -0.20044685-0.04165196j, -0.10826262+0.10266075j, 0.00908756+0.03878007j], [0.0621328 +0.01124205j, -0.09875514+0.03532969j, 0.06845517-0.0007917j, -0.07446912-0.04833757j]], [[-0.20044685+0.04165196j, 0.27798487+0.j, 0.1168035 -0.16444866j, -0.02330462-0.03342821j], [-0.05534904+0.03084092j, 0.12573467-0.10798206j, -0.11089995-0.00871493j, 0.12070923+0.06305572j]], [[-0.10826262-0.10266075j, 0.1168035 +0.16444866j, 0.14655936+0.j, 0.01108973-0.02707429j], [-0.03802822-0.02065978j, 0.11446351+0.02714761j, -0.04444638-0.06913591j, 0.0152047 +0.09819269j]], [[0.00908756-0.03878007j, -0.02330462+0.03342821j, 0.01108973+0.02707429j, 0.01508909+0.j], [0.01704223-0.027488j, -0.01730545+0.02236228j, -0.00599336-0.00033109j, -0.00656888+0.00398834j]]], [[[0.0621328 -0.01124205j, -0.05534904-0.03084092j, -0.03802822+0.02065978j, 0.01704223+0.027488j], [0.07944054+0.j, -0.06829682-0.03518166j, -0.03233181+0.00302739j, 0.01312916-0.01292429j]], [[-0.09875514-0.03532969j, 0.12573467+0.10798206j, 0.11446351-0.02714761j, -0.01730545-0.02236228j], [-0.06829682+0.03518166j, 0.14196469+0.j, -0.01381411-0.07685809j, 0.00702356+0.08897536j]], [[0.06845517+0.0007917j, -0.11089995+0.00871493j, -0.04444638+0.06913591j, -0.00599336+0.00033109j], [-0.03233181-0.00302739j, -0.01381411+0.07685809j, 0.09032825+0.j, -0.07714489-0.02696862j]], [[-0.07446912+0.04833757j, 0.12070923-0.06305572j, 0.0152047 -0.09819269j, -0.00656888-0.00398834j], [0.01312916+0.01292429j, 0.00702356-0.08897536j, -0.07714489+0.02696862j, 0.08332934+0.j]]]], dtype=dtype)
    assert_array_almost_equal(ket.partial_trace([0,2])[0], true_ptrace_02, decimal=err_tol)
    assert ket.partial_trace([0,2])[1] == [[2, 4], [2, 4]]
    true_ptrace_12 = tl.tensor([[[[0.15432212+0.j, -0.13261386-0.05659967j, -0.06642808+0.02085033j, 0.00749923+0.02304935j], [-0.05450758+0.04287334j, 0.08094074-0.13830521j, -0.05030022-0.03703685j, 0.07032205-0.0349464j]], [[-0.13261386+0.05659967j, 0.13628861+0.j, 0.04638897-0.04520771j, -0.01916033-0.01622219j], [0.02690457-0.06551375j, -0.02074334+0.1619715j, 0.0710738 +0.02123121j, -0.04964907+0.04789544j]], [[-0.06642808-0.02085033j, 0.04638897+0.04520771j, 0.04277917+0.j, 0.00660167-0.02049692j], [0.05360202-0.00209579j, -0.07485152+0.01896212j, -0.0256659 +0.03408614j, -0.01626923+0.01712758j]], [[0.00749923-0.02304935j, -0.01916033+0.01622219j, 0.00660167+0.02049692j, 0.01581717+0.j], [0.01057148+0.03601682j, -0.00439321-0.0542535j, -0.04251717-0.0231751j, -0.0004876 +0.01039105j]]], [[[-0.05450758-0.04287334j, 0.02690457+0.06551375j, 0.05360202+0.00209579j, 0.01057148-0.03601682j], [0.09042229+0.j, -0.13612981-0.02023395j, -0.07416635+0.08483782j, 0.01471749+0.00280643j]], [[0.08094074+0.13830521j, -0.02074334-0.1619715j, -0.07485152-0.01896212j, -0.00439321+0.0542535j], [-0.13612981+0.02023395j, 0.28366095+0.j, 0.05660042-0.19609905j, 0.00287926+0.07176934j]], [[-0.05030022+0.03703685j, 0.0710738 -0.02123121j, -0.0256659 -0.03408614j, -0.04251717+0.0231751j], [-0.07416635-0.08483782j, 0.05660042+0.19609905j, 0.19410843+0.j, -0.07265683-0.03354599j]],[[0.07032205+0.0349464j, -0.04964907-0.04789544j, -0.01626923-0.01712758j, -0.0004876 -0.01039105j], [0.01471749-0.00280643j, 0.00287926-0.07176934j, -0.07265683+0.03354599j, 0.08260125+0.j]]]], dtype=dtype)
    assert_array_almost_equal(ket.partial_trace([1,2])[0], true_ptrace_12, decimal=err_tol)
    assert ket.partial_trace([1,2])[1] == [[2, 4], [2, 4]]


def test_ptrace_dm():
    # For three dimensions, trace 2
    dtype = complex64
    state = tl.tensor([0.08201135-0.09100739j, -0.20488306-0.04694759j, -0.12321797+0.1886681j,
 -0.04836747+0.06454407j, -0.03755223-0.10559523j, -0.04145692-0.00576662j,
 -0.18270886-0.09515905j,  0.03527036-0.03941562j,  0.02011546+0.23625573j,
 -0.03720595+0.09936446j,  0.09866752+0.21497814j, -0.30528484+0.15161518j,
  0.04574538-0.22470893j,  0.12645936-0.04721388j,  0.08701734-0.16569064j,
  0.02284862+0.06427849j, -0.07837197+0.11918923j, -0.07980366-0.19564699j,
  0.05081279+0.09801488j,  0.09516529-0.03943924j, -0.13894926-0.05890648j,
  0.11447325-0.08165255j,  0.13994662-0.31225279j,  0.08933183-0.05452201j,
 -0.0044457 +0.05703901j, -0.00466147+0.19505054j, -0.02734238+0.01714859j,
 -0.13406723-0.03578553j,  0.12894905-0.24480411j,  0.07474015-0.0330334j,
  0.21426612-0.08999843j,  0.12577212-0.02818856j], dtype=dtype)
    state = state.reshape(32, 1)
    dm = tl.dot(state, tl.conj(transpose(state, 0, 1)))
    dm = dm.reshape((2,4,4,2,4,4))
    dm = DensityTensor(dm, [[2, 4, 4], [2, 4, 4]])
    rho0 = dm.partial_trace([0])
    rho1 = dm.partial_trace([1])
    rho2 = dm.partial_trace([2])
    true_partial_trace_0 = tl.tensor([[0.52612376-7.5450695e-19j, 0.20592207-1.4692931e-01j],
 [0.20592207+1.4692931e-01j, 0.47387624+2.0043407e-18j]], dtype=dtype)
    assert_array_almost_equal(rho0[0], true_partial_trace_0, decimal=err_tol)
    assert rho0[1] == [[2], [2]]
    true_patrial_trace_1 = tl.tensor([[ 0.20426837-2.5058049e-19j,  0.01347   -5.1825900e-02j,
  -0.00563766+5.9191868e-02j, -0.06206847+1.4615341e-03j],
 [ 0.01347   +5.1825900e-02j,  0.23013563+2.7344122e-18j,
  -0.11837023+5.0540712e-02j,  0.09379704-1.6025876e-01j],
 [-0.00563766-5.9191868e-02j, -0.11837023-5.0540712e-02j,
   0.30125183-2.3085647e-19j, -0.13041213+9.7903743e-02j],
 [-0.06206847-1.4615341e-03j,  0.09379704+1.6025876e-01j,
  -0.13041213-9.7903743e-02j,  0.2643442 -1.0031413e-18j]], dtype=dtype)
    assert_array_almost_equal(rho1[0], true_patrial_trace_1, decimal=err_tol)
    assert rho1[1] == [[4], [4]]
    true_partial_trace_2 = tl.tensor([[0.25933212-2.97328081e-19j, 0.02946673-6.67579696e-02j,
  0.14103071-6.17514998e-02j, 0.00959104-1.28892973e-01j],
 [0.02946673+6.67579696e-02j, 0.18457314-1.10305227e-18j,
  0.10177283+9.27890316e-02j, 0.05069869-7.14271963e-02j],
 [0.14103071+6.17514998e-02j, 0.10177283-9.27890316e-02j,
  0.36851948+2.03122657e-18j, 0.07228783-1.19187765e-01j],
 [0.00959104+1.28892973e-01j, 0.05069869+7.14271963e-02j,
  0.07228783+1.19187765e-01j, 0.18757528+6.18987628e-19j]], dtype=dtype)
    assert_array_almost_equal(rho2[0], true_partial_trace_2, decimal=err_tol)
    assert rho2[1] == [[4], [4]]


def test_vonneumann_entropy():
    state = tl.tensor([-1.83550206, -1.02964279, -0.680801,    1.14528818,  0.01097224, -1.46404358,
  0.65055477, -1.13207049,  0.70687065,  0.19446055, -2.35153163,  0.30000451,
  0.75665108,  0.2342452,  -0.15429997,  0.45617948])
    state = state.reshape(16, 1)/norm(state)
    dm = tl.dot(state, transpose(state, 0, 1))
    dm = (dm + tl.dot(state, transpose(state, 0, 1)))/2
    dm = tl.reshape(tl.tensor(dm), (2,8,2,8))
    dm = DensityTensor(dm, [[2, 8], [2, 8]])
    vne0 = dm.vonneumann_entropy([0])
    vne1 = dm.vonneumann_entropy([1])
    qt_vne0 = 0.9745033633882318
    qt_vne1 = 0.9745033633882336
    assert_array_almost_equal(vne0, qt_vne0, decimal=err_tol)
    assert_array_almost_equal(vne1, qt_vne1, decimal=err_tol)


def test_mutual_information():
    # For three dimensions, trace 2
    state = tl.tensor([0.14110102-0.15709271j, -0.04324926+0.20760004j, -0.05796625-0.26234921j,
 -0.08253501-0.01895592j, -0.15324264-0.04011366j, -0.21166543-0.03906583j,
 -0.09848804+0.11084609j,  0.09420742+0.16097526j,  0.14005671+0.07173187j,
  0.04453465-0.13108242j,  0.12965855-0.16604845j,  0.01507161+0.2003648j,
  0.03912012+0.09987058j,  0.0695882 +0.03147635j, -0.1369483 +0.01605004j,
  0.0795653 -0.14407638j, -0.06841887+0.11834761j,  0.02820055-0.14262362j,
  0.09563684-0.07717743j, -0.05667943+0.02130579j,  0.01906874+0.16263632j,
 -0.05572903+0.13782045j, -0.04141309+0.04972224j,  0.05955482-0.03205389j,
  0.05868344-0.26749278j,  0.17189479-0.29090792j,  0.08034296-0.12432543j,
  0.05244037+0.20789466j,  0.09871175+0.10762219j, -0.01618293-0.14503207j,
  0.22052354+0.09676586j, -0.13449241-0.13689155j], dtype=complex64)    
    state = state.reshape(32, 1)
    dm = tl.dot(state, tl.conj(transpose(state, 0, 1)))
    dm = dm.reshape((2,4,4,2,4,4))
    dm = DensityTensor(dm, [[2, 4, 4], [2, 4, 4]])
    vne0 = dm.mutual_information([0], [1])
    vne1 = dm.mutual_information([1], [0,2])
    vne2 = dm.mutual_information([2], [0])
    qt_vne0 = 0.9807561825057751
    qt_vne1 = 3.3849949067768805
    qt_vne2 = 0.8792128878604994
    assert_array_almost_equal(vne0, qt_vne0, decimal=err_tol)
    assert_array_almost_equal(vne1, qt_vne1, decimal=err_tol)
    assert_array_almost_equal(vne2, qt_vne2, decimal=err_tol)
